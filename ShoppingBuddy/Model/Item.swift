import Foundation
/// Represents an item in a shopping list or inventory system.
///
/// Conforms to:
/// - `Identifiable`: For unique identification in SwiftUI lists
/// - `Codable`: For serialization/deserialization (JSON, plist, etc.)
/// - `Equatable`: For comparison operations
///
/// ## Usage Example:
/// ```swift
/// let groceryItem = Item(
///     name: "Apples",
///     quantity: 5,
///     unitPrice: 1.99,
///     section: .produce
/// )
/// ```
struct Item: Identifiable, Codable, Equatable {
    /// Unique identifier for the item (auto-generated by default)
    let id: UUID
    
    /// Name/description of the item (e.g., "Milk", "Eggs")
    @NonEmptyName var name: String
    
    /// Quantity of the item (must be positive)
    @NonZeroQuantity var quantity: Int
    
    /// Price per unit of the item
    @PriceAmount var unitPrice: Double
    
    /// Purchase status flag (defaults to false)
    var isPurchased: Bool
    
    /// Category section for the item
    var section: Sections
    
    /// Creates a new Item instance
    /// - Parameters:
    ///   - id: Unique identifier (auto-generated if not provided)
    ///   - name: Item name/description
    ///   - quantity: Item quantity (must be ≥1)
    ///   - unitPrice: Price per single unit
    ///   - isPurchased: Initial purchase status (defaults to false)
    ///   - section: Category section for organization
    init(
        id: UUID = UUID(),
        name: String,
        quantity: Int,
        unitPrice: Double,
        isPurchased: Bool = false,
        section: Sections
    ) {
        self.id = id
        self._name = NonEmptyName(wrappedValue: name)
        self._quantity = NonZeroQuantity(wrappedValue: quantity)
        self._unitPrice = PriceAmount(wrappedValue: unitPrice)
        self.isPurchased = isPurchased
        self.section = section
    }
    
    /// Calculates the total price (quantity × unitPrice)
    var totalPrice: Double {
        Double(quantity) * unitPrice
    }
    
    /// Compares two `Item` instances for equality.
    ///
    /// Two items are considered equal if **all** of the following match:
    /// - `id`: UUID
    /// - `name`: String
    /// - `quantity`: Int
    /// - `unitPrice`: Double
    /// - `isPurchased`: Bool
    /// - `section`: Sections
    ///
    /// This method supports Swift's `Equatable` protocol, which allows
    /// items to be compared directly (e.g., in tests or list updates).
    ///
    /// ## Example:
    /// ```swift
    /// if itemA == itemB {
    ///     print("Items are identical.")
    /// }
    /// ```
    public static func == (lhs: Item, rhs: Item) -> Bool {
        return lhs.id == rhs.id &&
        lhs.name == rhs.name &&
        lhs.quantity == rhs.quantity &&
        lhs.unitPrice == rhs.unitPrice &&
        lhs.isPurchased == rhs.isPurchased &&
        lhs.section == rhs.section
    }
}
